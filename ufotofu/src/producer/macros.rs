//! Macros for quickly writing producers.
//!
//! More specifically, a family of macros for wrapper producers with an invariant wrapper and implementing various traits on the
//! resulting type by forwarding to the wrapper.
//!
//! See `producer::from_boxed_slice` for example usage of all these macros.

// Macro syntax for handling generic parameters from https://stackoverflow.com/a/61189128

// /// Create an opaque type of name `outer` that wraps the producer `inner` with invariant checks.
// macro_rules! invarianted_producer_outer_type {
//     ($(#[$doc:meta])* $outer:ident $inner:ident $(< $( $lt:tt $( : $clt:tt $(+ $dlt:tt )* )? ),+ >)? ) => {
//         $(#[$doc])*
//         pub struct $outer $(< $( $lt $( : $clt $(+ $dlt )* )? ),+ >)?(ufotofu::producer::Invariant<$inner $(< $( $lt ),+ >)?>);
//     }
// }

/// The method implementations of an opaque invariant wrapper around `Producer`.
macro_rules! invarianted_producer_methods {
    () => {
        async fn produce(&mut self) -> Result<Either<Self::Item, Self::Final>, Self::Error>
        where
            Self::Item: Clone,
        {
            ufotofu::Producer::produce(&mut self.0).await
        }

        async fn overwrite_full_slice<'b>(
            &mut self,
            buf: &'b mut [Self::Item],
        ) -> Result<(), ufotofu::OverwriteFullSliceError<Self::Final, Self::Error>>
        where
            Self::Item: Clone,
        {
            ufotofu::Producer::overwrite_full_slice(&mut self.0, buf).await
        }
    };
}

/// Implement `Producer` for an opaque invariant wrapper type generated by the invarianted_producer_outer_type macro.
macro_rules! invarianted_impl_producer {
    ($outer:ident $(< $( $lt:tt $( : $clt:tt $(+ $dlt:tt )* )? ),+ >)? $(#[$doc_item:meta])? Item $t_item:ty; $(#[$doc_final:meta])? Final $t_final:ty; $(#[$doc_error:meta])? Error $t_error:ty) => {
        impl $(< $( $lt $( : $clt $(+ $dlt )* )? ),+ >)?
            ufotofu::Producer
        for $outer
            $(< $( $lt ),+ >)?
        {
            $(#[$doc_item])*
            type Item = $t_item;
            $(#[$doc_final])*
            type Final = $t_final;
            $(#[$doc_error])*
            type Error = $t_error;

            invarianted_producer_methods!();
        }
    }
}

/// The method implementations of an opaque invariant wrapper around `BufferedConsmer`.
macro_rules! invarianted_buffered_producer_methods {
    () => {
        async fn slurp(&mut self) -> Result<(), Self::Error> {
            ufotofu::BufferedProducer::slurp(&mut self.0).await
        }
    };
}

/// Implement `BufferedProducer` for an opaque invariant wrapper type generated by the invarianted_producer_outer_type macro.
macro_rules! invarianted_impl_buffered_producer {
    ($outer:ident $(< $( $lt:tt $( : $clt:tt $(+ $dlt:tt )* )? ),+ >)?) => {
        impl $(< $( $lt $( : $clt $(+ $dlt )* )? ),+ >)?
            ufotofu::BufferedProducer
        for $outer
            $(< $( $lt ),+ >)?
        {
            invarianted_buffered_producer_methods!();
        }
    }
}

/// The method implementations of an opaque invariant wrapper around `BulkConsmer`.
macro_rules! invarianted_bulk_producer_methods {
    () => {
        async fn expose_items<'kfhwkfwe>(
            &'kfhwkfwe mut self,
        ) -> Result<Either<&'kfhwkfwe [Self::Item], Self::Final>, Self::Error>
        where
            Self::Item: 'kfhwkfwe,
        {
            ufotofu::BulkProducer::expose_items(&mut self.0).await
        }

        async fn consider_produced(&mut self, amount: usize) -> Result<(), Self::Error> {
            ufotofu::BulkProducer::consider_produced(&mut self.0, amount).await
        }

        async fn bulk_produce(
            &mut self,
            buf: &mut [Self::Item],
        ) -> Result<Either<usize, Self::Final>, Self::Error>
        where
            Self::Item: Clone,
        {
            ufotofu::BulkProducer::bulk_produce(&mut self.0, buf).await
        }

        async fn bulk_overwrite_full_slice<'kfhwkfwe>(
            &mut self,
            buf: &'kfhwkfwe mut [Self::Item],
        ) -> Result<(), ufotofu::OverwriteFullSliceError<Self::Final, Self::Error>>
        where
            Self::Item: Clone,
        {
            ufotofu::BulkProducer::bulk_overwrite_full_slice(&mut self.0, buf).await
        }
    };
}

/// Implement `BulkProducer` for an opaque invariant wrapper type generated by the invarianted_producer_outer_type macro.
macro_rules! invarianted_impl_bulk_producer {
    ($outer:ident $(< $( $lt:tt $( : $clt:tt $(+ $dlt:tt )* )? ),+ >)?) => {
        impl $(< $( $lt $( : $clt $(+ $dlt )* )? ),+ >)?
            ufotofu::BulkProducer
        for $outer
            $(< $( $lt ),+ >)?
        {
            invarianted_bulk_producer_methods!();
        }
    }
}
